package org.firstinspires.ftc.teamcode.drive;

import java.util.Objects;

import static java.lang.Math.abs;
import static java.lang.Math.max;

public class DrivePower {
    public static final DrivePower ZERO = new DrivePower(0, 0, 0, 0);

    public final double rightFront, rightBack, leftFront, leftBack;

    public DrivePower(double rightFront, double rightBack, double leftFront, double leftBack) {
        this.rightFront = rightFront;
        this.rightBack = rightBack;
        this.leftFront = leftFront;
        this.leftBack = leftBack;
    }

    public DrivePower scale(double scalar) {
        return new DrivePower(
                rightFront * scalar,
                rightBack * scalar,
                leftFront * scalar,
                leftBack * scalar);
    }

    public static DrivePower combine(DrivePower... drivePowers) {
        double rf = 0, rb = 0, lf = 0, lb = 0;
        for (DrivePower drivePower : drivePowers) {
            rf += drivePower.rightFront;
            rb += drivePower.rightBack;
            lf += drivePower.leftFront;
            lb += drivePower.leftBack;
        }
        return normalize(new DrivePower(rf, rb, lf, lb));
    }

    public static DrivePower normalize(DrivePower drivePower) {
        double scalar = 1.0 / maxAbs(drivePower.rightFront, drivePower.rightBack, drivePower.leftFront, drivePower.leftBack, 1.0d);
        return drivePower.scale(scalar);
    }

    private static double maxAbs(double... doubles) {
        double max = 0.0;
        for (int i = 0; i < doubles.length; i++) {
            max = max(abs(doubles[i]), max);
        }

        return max;
    }

    /**
     * Generated by Android Studio.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        DrivePower that = (DrivePower) o;
        return Double.compare(that.rightFront, rightFront) == 0 &&
                Double.compare(that.rightBack, rightBack) == 0 &&
                Double.compare(that.leftFront, leftFront) == 0 &&
                Double.compare(that.leftBack, leftBack) == 0;
    }

    /**
     * Generated by Android Studio.
     */
    @Override
    public int hashCode() {
        return Objects.hash(rightFront, rightBack, leftFront, leftBack);
    }

    /**
     * Generated by Android Studio.
     */
    @Override
    public String toString() {
        return "DrivePower{" +
                "rightFront=" + rightFront +
                ", rightBack=" + rightBack +
                ", leftFront=" + leftFront +
                ", leftBack=" + leftBack +
                '}';
    }

}
